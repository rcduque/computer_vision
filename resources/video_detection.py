# -*- coding: utf-8 -*-
"""CV-Video.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9k1UrGe1ld8_o_grjy5DPDt3ZCkAspN

**Detectar Imagen de Fondo - Backgound Image**
"""

#Download images/videos from google drive
#! gdown --id 1jQFC8LR-tWkUmXb-AjEsycOmznE0Ponf
! gdown --id 1hIYrzhGIFfExYMeX-heG1JaDIvjsIObC

import numpy as np
import cv2
from google.colab.patches import cv2_imshow

video = cv2.VideoCapture("trafico6.mp4")
frames_lenght = video.get(cv2.CAP_PROP_FRAME_COUNT) #get number of frames
frames =[]
print(frames_lenght)
#Capture all videos until it has

for i in range(0, int(frames_lenght)):
  has_video, frame = video.read()
  if has_video:
    frames.append(frame)

#SUM pixeles
#sum_frames = np.zeros(frames[0].shape)
sum_frames = frames[0].shape
for frame in frames:
  sum_frames = sum_frames + frame

cv2_imshow(sum_frames)
#sacamos el promedia a cada pixel
background_img = np.uint8(sum_frames/ (frames_lenght ))
cv2_imshow(background_img)

#check movement
from IPython.display import clear_output
from time import sleep
from scipy import ndimage

for i in range(1,10):

  img = frames[i*19]
  objects_frame = cv2.absdiff(img,background_img).astype('uint8')
  #remove noise
  objects_frame = cv2.GaussianBlur(objects_frame, (5,5), 0)
  #get gray image
  objects_frame = cv2.cvtColor(objects_frame, cv2.COLOR_BGR2GRAY)

  umbral, binari_frame = cv2.threshold(objects_frame,0,255, cv2.THRESH_OTSU)
  #convex need
  #binari_frame = 255 * np.uint8(binari_frame == 0)
  binari_frame = np.uint8(255*ndimage.binary_fill_holes(binari_frame))

  #Find cotours
  rgb_color = (0,255,0)
  line_width = 1 
  contours, _ = cv2.findContours(binari_frame,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
  for contour in contours:
    x,y, w,h = cv2.boundingRect(contour)  
    if w>10 and h >10 :
      cv2.rectangle(img, (x,y), (x+w, y+h), rgb_color,line_width)

  clear_output()
  cv2_imshow(img)
  #cv2_imshow(binari_frame)
  sleep(1)
  #break