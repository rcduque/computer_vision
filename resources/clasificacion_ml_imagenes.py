# -*- coding: utf-8 -*-
"""ML-Imagenes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MoRlxMYoUPEGxxnPGEsgBh3OZRL-Ek0N
"""

import cv2
import numpy as np
from scipy import ndimage
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

def findAspect(image_path):

  image = cv2.imread(image_path)
  image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

  umbral, image_mask_0 = cv2.threshold(image_gray, 0, 255, cv2.THRESH_OTSU)
  #cambiamos los 0 por 1
  image_mask_boolean = np.int8(image_mask_0[:,:]!=255)
  #image_mask = np.int8(image_mask_boolean) * 255
  image_mask = image_mask_boolean * 255

  #output = cv2.connectedComponentsWithStats(image_mask, 4, cv2.CV_32S)
  #component_stats = cv2.connectedComponentsWithStats(image_mask, 4, cv2.CV_32S)

  #find average by color
  total_pixeles = np.sum(image_mask_boolean)
  av_rojo = np.sum( image_mask_boolean * image[:,:,0]/255 ) / total_pixeles
  av_verde = np.sum( image_mask_boolean * image[:,:,1]/255 ) / total_pixeles

  #Encontramos el contorno
  contours, hierarchy = cv2.findContours(image_mask_0,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
  #contour = contours[0]
  x,y, w,h = cv2.boundingRect(contours[1])

  tasa_diferencia = 0
  if w > h :
    tasa_diferencia = h / w
  else :
    tasa_diferencia = w / h

  rgb_color = (0,255,0)
  line_width = 1 
  cv2.rectangle(image, (x,y), (x+w, y+h), rgb_color,line_width)

  return av_rojo, av_verde, tasa_diferencia

image_path = "banano1.jpg"
#findAspect(image_path)

datos = []
etiquetas = []

for i in range(1,3) :
  datos.append(findAspect("banano" + str(i) +".jpg"))
  etiquetas.append(1)
  datos.append(findAspect("manzana" + str(i) +".jpg"))
  etiquetas.append(-1)

datos = np.array(datos)
etiquetas = np.array(etiquetas)

print(datos)
print(etiquetas)

#Encontramos pesos a las variables
A = np.zeros((4,4)) #caracteristicas
B = np.zeros((4,1))

for i in range(0,2):
  x = np.append([1], datos[i])
  x = np.reshape(x, (4,1))
  y = etiquetas[i]
  A = A + x * x.T
  B = B + x * y

matriz_inverza = np.linalg.inv(A)
W = np.dot(matriz_inverza,B)

#En W se quedan almacenados los pesos
nueva_img = "banano4.jpg"
x = np.append([1], findAspect(nueva_img))
print("------")
print(W)
print("------")
print(x)
print("------")
print(np.dot(W.T, x))
print("------")
print(np.sign(np.dot(W.T, x)))
if np.sign(np.dot(W.T, x)) == 1:
  print("banano")
else :
  print("manzana")